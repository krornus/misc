!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
ALL_ARG_TYPES	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^const ALL_ARG_TYPES: [(ArgType, &'static str); 18] =$/;"	c
Access	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub enum Access {$/;"	g
Access	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^pub enum Access {$/;"	g
Annotation	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^struct Annotation {$/;"	s
Annotations	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^struct Annotations(Option<BTreeMap<String, String>>);$/;"	s
Annotations	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^pub struct Annotations(Option<BTreeMap<String, String>>);$/;"	s
Append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^pub trait Append: Sized {$/;"	t
ArcMap	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^type ArcMap<K, V> = BTreeMap<Arc<K>, Arc<V>>;$/;"	T
ArcMap	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^pub type ArcMap<K, V> = BTreeMap<K, Arc<V>>;$/;"	T
Arg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^pub trait Arg {$/;"	t
ArgType	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^pub enum ArgType {$/;"	g
Argument	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub struct Argument(Option<String>, Signature<'static>);$/;"	s
Argument	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^pub struct Argument<'a> {$/;"	s
Argument	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^pub struct Argument(Option<String>, Signature<'static>);$/;"	s
Array	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^pub struct Array<'a, T, I>(I, PhantomData<(*const T, &'a Message)>);$/;"	s
ArrayError	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^pub enum ArrayError {$/;"	g
BUS_NAME	/home/spowell/programming/rust/dbus/server/src/main.rs	/^const BUS_NAME: &str = "com.example.dbustest";$/;"	c
BusName	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^pub struct BusName<'a>(Cow<'a, CStr>);$/;"	s
Carousel	/home/spowell/programming/rust/dbus/server/src/main.rs	/^struct Carousel<'a> {$/;"	s
ConnPath	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^pub struct ConnPath<'a, C> {$/;"	s
Connection	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^pub struct Connection {$/;"	s
ConnectionItem	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^pub enum ConnectionItem {$/;"	g
ConnectionItems	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^pub struct ConnectionItems<'a> {$/;"	s
Custom	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^    struct Custom;$/;"	s
Custom	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    struct Custom;$/;"	s
DBUS_TYPE_ARRAY	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_ARRAY: c_int = 'a' as c_int;$/;"	c
DBUS_TYPE_BOOLEAN	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_BOOLEAN: c_int = 'b' as c_int;$/;"	c
DBUS_TYPE_BYTE	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_BYTE: c_int = 'y' as c_int;$/;"	c
DBUS_TYPE_DICT_ENTRY	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_DICT_ENTRY: c_int = 'e' as c_int;$/;"	c
DBUS_TYPE_DOUBLE	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_DOUBLE: c_int = 'd' as c_int;$/;"	c
DBUS_TYPE_INT16	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_INT16: c_int = 'n' as c_int;$/;"	c
DBUS_TYPE_INT32	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_INT32: c_int = 'i' as c_int;$/;"	c
DBUS_TYPE_INT64	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_INT64: c_int = 'x' as c_int;$/;"	c
DBUS_TYPE_INVALID	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_INVALID: c_int = 0;$/;"	c
DBUS_TYPE_OBJECT_PATH	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_OBJECT_PATH: c_int = 'o' as c_int;$/;"	c
DBUS_TYPE_SIGNATURE	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_SIGNATURE: c_int = 'g' as c_int;$/;"	c
DBUS_TYPE_STRING	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_STRING: c_int = 's' as c_int;$/;"	c
DBUS_TYPE_STRUCT	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_STRUCT: c_int = 'r' as c_int;$/;"	c
DBUS_TYPE_UINT16	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_UINT16: c_int = 'q' as c_int;$/;"	c
DBUS_TYPE_UINT32	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_UINT32: c_int = 'u' as c_int;$/;"	c
DBUS_TYPE_UINT64	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_UINT64: c_int = 't' as c_int;$/;"	c
DBUS_TYPE_UNIX_FD	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_UNIX_FD: c_int = 'h' as c_int;$/;"	c
DBUS_TYPE_VARIANT	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub const DBUS_TYPE_VARIANT: c_int = 'v' as c_int;$/;"	c
DBusAddWatchFunction	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub type DBusAddWatchFunction = Option<extern fn(watch: *mut DBusWatch, user_data: *mut c_void) -> u32>;$/;"	T
DBusBusType	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub enum DBusBusType {$/;"	g
DBusCallback	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub type DBusCallback = extern "C" fn(*mut c_void, *mut c_void, *mut c_void) -> DBusHandlerResult;$/;"	T
DBusConnection	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub type DBusConnection = c_void;$/;"	T
DBusDispatchStatus	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub enum DBusDispatchStatus {$/;"	g
DBusError	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub struct DBusError {$/;"	s
DBusHandleMessageFunction	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub type DBusHandleMessageFunction = Option<$/;"	T
DBusHandlerResult	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub enum DBusHandlerResult {$/;"	g
DBusMessage	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub type DBusMessage = c_void;$/;"	T
DBusMessageIter	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub struct DBusMessageIter {$/;"	s
DBusMessageType	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub enum DBusMessageType {$/;"	g
DBusNameFlag	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub enum DBusNameFlag {$/;"	g
DBusObjectPathVTable	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub struct DBusObjectPathVTable {$/;"	s
DBusReleaseNameReply	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub enum DBusReleaseNameReply {$/;"	g
DBusRemoveWatchFunction	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub type DBusRemoveWatchFunction = Option<extern fn(watch: *mut DBusWatch, user_data: *mut c_void)>;$/;"	T
DBusRequestNameReply	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub enum DBusRequestNameReply {$/;"	g
DBusWatch	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub type DBusWatch = c_void;$/;"	T
DBusWatchEvent	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub enum DBusWatchEvent {$/;"	g
DBusWatchToggledFunction	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^pub type DBusWatchToggledFunction = Option<extern fn(watch: *mut DBusWatch, user_data: *mut c_void)>;$/;"	T
DataType	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^pub trait DataType: Sized + Default {$/;"	t
DebugGetProp	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^struct DebugGetProp<M: MethodType<D>, D: DataType>(Box<M::GetProp>);$/;"	s
DebugMethod	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^struct DebugMethod<M: MethodType<D>, D: DataType>(Box<M::Method>);$/;"	s
DebugSetProp	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^struct DebugSetProp<M: MethodType<D>, D: DataType>(Box<M::SetProp>);$/;"	s
Device	/home/spowell/programming/rust/dbus/server/src/server.rs	/^struct Device {$/;"	s
Dict	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^pub struct Dict<'a, K: DictKey, V: Arg, I>(I, PhantomData<(&'a Message, *const K, *const V)>);$/;"	s
DictKey	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^pub trait DictKey: Arg {}$/;"	t
EmitsChangedSignal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub enum EmitsChangedSignal {$/;"	g
EmitsChangedSignal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^pub enum EmitsChangedSignal {$/;"	g
Error	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^pub struct Error {$/;"	s
ErrorName	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^pub struct ErrorName<'a>(Cow<'a, CStr>);$/;"	s
FIXED_ARRAY_ALIGNMENTS	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^const FIXED_ARRAY_ALIGNMENTS: [(ArgType, usize); 9] = [$/;"	c
Factory	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub struct Factory<M>(PhantomData<M>);$/;"	s
Factory	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^pub struct Factory<M: MethodType<D>, D: DataType=()>(Arc<IfaceCache<M, D>>);$/;"	s
FromMessageItem	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^pub trait FromMessageItem<'a> :Sized {$/;"	t
Get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^pub trait Get<'a>: Sized {$/;"	t
GetProp	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type GetProp = Fn(&mut IterAppend, &PropInfo<Self, D>) -> Result<(), MethodErr> + Send + Sync + 'static;$/;"	T
GetProp	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type GetProp = Fn(&mut IterAppend, &PropInfo<Self, D>) -> Result<(), MethodErr>;$/;"	T
GetProp	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type GetProp = RefCell<FnMut(&mut IterAppend, &PropInfo<Self, D>) -> Result<(), MethodErr>>;$/;"	T
GetProp	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type GetProp: ?Sized;$/;"	T
IConnection	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^struct IConnection {$/;"	s
IMethod	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^struct IMethod<'a> {$/;"	s
INITDBUS	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^static INITDBUS: std::sync::Once = std::sync::ONCE_INIT;$/;"	c
IObjectPath	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^struct IObjectPath<'a> {$/;"	s
IProperty	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^struct IProperty<'a> {$/;"	s
ISignal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^struct ISignal<'a> {$/;"	s
IfaceCache	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^pub struct IfaceCache<M: MethodType<D>, D: DataType>(Mutex<ArcMap<IfaceName<'static>, Interface<M, D>>>);$/;"	s
Interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub struct Interface<M> {$/;"	s
Interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^pub struct Interface<'a> {$/;"	s
Interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^pub struct Interface<'a>(Cow<'a, CStr>);$/;"	s
Interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^        type Interface = ();$/;"	T
Interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^        type Interface = ();$/;"	T
Interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type Interface = ();$/;"	T
Interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type Interface: fmt::Debug + Default;$/;"	T
Interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^pub struct Interface<M: MethodType<D>, D: DataType> {$/;"	s
Interface	/home/spowell/programming/rust/dbus/server/src/server.rs	/^    type Interface = ();$/;"	T
Introspect	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^pub trait Introspect {$/;"	t
Item	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    type Item = (K, V);$/;"	T
Item	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    type Item = T;$/;"	T
Item	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    type Item = Box<RefArg + 'static>;$/;"	T
Item	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    type Item = ConnectionItem;$/;"	T
Item	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    type Item = ConnectionItem;$/;"	T
Item	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    type Item = ConnectionItem;$/;"	T
Iter	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^pub struct Iter<'a>(ffi::DBusMessageIter, &'a Message, u32);$/;"	s
IterAppend	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^pub struct IterAppend<'a>(ffi::DBusMessageIter, &'a Message);$/;"	s
MTFn	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^pub struct MTFn<D=()>(PhantomData<*const D>);$/;"	s
MTFnMut	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^pub struct MTFnMut<D=()>(PhantomData<*const D>);$/;"	s
MTSync	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^pub struct MTSync<D=()>(PhantomData<*const D>);$/;"	s
Member	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^pub struct Member<'a>(Cow<'a, CStr>);$/;"	s
Message	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^pub struct Message {$/;"	s
MessageItem	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^pub enum MessageItem {$/;"	g
MessageReply	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^pub struct MessageReply<F>(Option<F>, u32);$/;"	s
Method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub struct Method<M> {$/;"	s
Method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^pub struct Method<'a> {$/;"	s
Method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^        type Method = i32;$/;"	T
Method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^        type Method = ();$/;"	T
Method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^pub struct Method<M: MethodType<D>, D: DataType> {$/;"	s
Method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type Method = ();$/;"	T
Method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type Method = Fn(&MethodInfo<Self, D>) -> MethodResult + Send + Sync + 'static;$/;"	T
Method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type Method = Fn(&MethodInfo<Self, D>) -> MethodResult;$/;"	T
Method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type Method = RefCell<FnMut(&MethodInfo<Self, D>) -> MethodResult>;$/;"	T
Method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type Method: ?Sized;$/;"	T
Method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type Method: fmt::Debug + Default;$/;"	T
Method	/home/spowell/programming/rust/dbus/server/src/server.rs	/^    type Method = ();$/;"	T
MethodErr	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub struct MethodErr(ErrorName<'static>, String);$/;"	s
MethodErr	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^pub struct MethodErr(ErrorName<'static>, String);$/;"	s
MethodFn	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub struct MethodFn<'a>(Box<Fn(&Message, &ObjectPath<MethodFn<'a>>, &Tree<MethodFn<'a>>) -> MethodResult + 'a>);$/;"	s
MethodFnMut	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub struct MethodFnMut<'a>(Box<RefCell<FnMut(&Message, &ObjectPath<MethodFnMut<'a>>, &Tree<MethodFnMut<'a>>) -> MethodResult + 'a>>);$/;"	s
MethodHandler	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^pub type MethodHandler<'a> = Box<FnMut(&mut Message) -> MethodResult + 'a>;$/;"	T
MethodInfo	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^pub struct MethodInfo<'a, M: 'a + MethodType<D>, D: 'a + DataType> {$/;"	s
MethodResult	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub type MethodResult = Result<Vec<Message>, MethodErr>;$/;"	T
MethodResult	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^pub type MethodResult = Result<Vec<MessageItem>, (&'static str, String)>;$/;"	T
MethodResult	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^pub type MethodResult = Result<Vec<Message>, MethodErr>;$/;"	T
MethodSync	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub struct MethodSync(Box<Fn(&Message, &ObjectPath<MethodSync>, &Tree<MethodSync>) -> MethodResult + Send + Sync + 'static>);$/;"	s
MethodType	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub trait MethodType: Sized {$/;"	t
MethodType	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^pub trait MethodType<D: DataType>: Sized + Default {$/;"	t
MsgHandler	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^pub trait MsgHandler {$/;"	t
MsgHandlerResult	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^pub struct MsgHandlerResult {$/;"	s
Next	/home/spowell/programming/rust/dbus/server/src/main.rs	/^    fn Next<M: MethodType<D>, D: DataType>($/;"	f
ObjectPath	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub struct ObjectPath<M> {$/;"	s
ObjectPath	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^pub struct ObjectPath<'a> {$/;"	s
ObjectPath	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^        type ObjectPath = Arc<u8>;$/;"	T
ObjectPath	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^        type ObjectPath = ();$/;"	T
ObjectPath	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type ObjectPath = ();$/;"	T
ObjectPath	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type ObjectPath: fmt::Debug;$/;"	T
ObjectPath	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^pub struct ObjectPath<M: MethodType<D>, D: DataType> {$/;"	s
ObjectPath	/home/spowell/programming/rust/dbus/server/src/server.rs	/^    type ObjectPath = Arc<Device>;$/;"	T
OrgFreedesktopDBusIntrospectable	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^pub trait OrgFreedesktopDBusIntrospectable {$/;"	t
OrgFreedesktopDBusObjectManager	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^pub trait OrgFreedesktopDBusObjectManager {$/;"	t
OrgFreedesktopDBusPeer	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^pub trait OrgFreedesktopDBusPeer {$/;"	t
OrgFreedesktopDBusProperties	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^pub trait OrgFreedesktopDBusProperties {$/;"	t
OwnedFd	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^pub struct OwnedFd {$/;"	s
Path	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^pub struct Path<'a>(Cow<'a, CStr>);$/;"	s
Previous	/home/spowell/programming/rust/dbus/server/src/main.rs	/^    fn Previous<M: MethodType<D>, D: DataType>($/;"	f
PropHandler	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/prop.rs	/^pub struct PropHandler<'a> {$/;"	s
PropInfo	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^pub struct PropInfo<'a, M: 'a + MethodType<D>, D: 'a + DataType> {$/;"	s
Property	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub struct Property<M> {$/;"	s
Property	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^pub struct Property<'a> {$/;"	s
Property	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^        type Property = ();$/;"	T
Property	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^        type Property = i32;$/;"	T
Property	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^pub struct Property<M: MethodType<D>, D: DataType> {$/;"	s
Property	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type Property = ();$/;"	T
Property	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type Property: fmt::Debug;$/;"	T
Property	/home/spowell/programming/rust/dbus/server/src/server.rs	/^    type Property = ();$/;"	T
PropertyAccess	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^pub enum PropertyAccess<'a> {$/;"	g
PropertyGetResult	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^pub type PropertyGetResult = Result<MessageItem, (&'static str, String)>;$/;"	T
PropertyROHandler	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^pub trait PropertyROHandler {$/;"	t
PropertyRWHandler	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^pub trait PropertyRWHandler {$/;"	t
PropertySetResult	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^pub type PropertySetResult = Result<(), (&'static str, String)>;$/;"	T
PropertyWOHandler	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^pub trait PropertyWOHandler {$/;"	t
Props	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/prop.rs	/^pub struct Props<'a> {$/;"	s
RefArg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^pub trait RefArg: fmt::Debug {$/;"	t
Remove	/home/spowell/programming/rust/dbus/server/src/main.rs	/^    fn Remove<M: MethodType<D>, D: DataType>($/;"	f
SetProp	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type SetProp = Fn(&mut Iter, &PropInfo<Self, D>) -> Result<(), MethodErr> + Send + Sync + 'static;$/;"	T
SetProp	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type SetProp = Fn(&mut Iter, &PropInfo<Self, D>) -> Result<(), MethodErr>;$/;"	T
SetProp	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type SetProp = RefCell<FnMut(&mut Iter, &PropInfo<Self, D>) -> Result<(), MethodErr>>;$/;"	T
SetProp	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type SetProp: ?Sized;$/;"	T
Signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub struct Signal {$/;"	s
Signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^pub struct Signal<'a> {$/;"	s
Signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^        type Signal = ();$/;"	T
Signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^        type Signal = ();$/;"	T
Signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^pub struct Signal<D: DataType> {$/;"	s
Signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type Signal = ();$/;"	T
Signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type Signal: fmt::Debug;$/;"	T
Signal	/home/spowell/programming/rust/dbus/server/src/server.rs	/^    type Signal = ();$/;"	T
Signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^pub struct Signature<'a>(Cow<'a, CStr>);$/;"	s
TData	/home/spowell/programming/rust/dbus/server/src/server.rs	/^struct TData;$/;"	s
Target	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^    type Target = str;$/;"	T
TogglePlay	/home/spowell/programming/rust/dbus/server/src/main.rs	/^    fn TogglePlay<M: MethodType<D>, D: DataType>($/;"	f
Tree	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub struct Tree<M> {$/;"	s
Tree	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^        type Tree = ();$/;"	T
Tree	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^        type Tree = ();$/;"	T
Tree	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type Tree = ();$/;"	T
Tree	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    type Tree: fmt::Debug;$/;"	T
Tree	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^pub struct Tree<M: MethodType<D>, D: DataType> {$/;"	s
Tree	/home/spowell/programming/rust/dbus/server/src/server.rs	/^    type Tree = ();$/;"	T
TreeServer	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^pub struct TreeServer<'a, I, M: 'a> {$/;"	s
TreeServer	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^pub struct TreeServer<'a, I, M: MethodType<D> + 'a, D: DataType + 'a> {$/;"	s
TypeMismatchError	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^pub struct TypeMismatchError {$/;"	s
TypeSig	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^pub type TypeSig<'a> = std::borrow::Cow<'a, str>;$/;"	T
Variant	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^pub struct Variant<T>(pub T);$/;"	s
Watch	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^pub struct Watch {$/;"	s
WatchList	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^pub struct WatchList {$/;"	s
access	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn access(mut self, e: Access) -> Self {$/;"	f
access	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn access(mut self, e: Access) -> Self {$/;"	f
add	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn add(mut self, p: Interface<M>) -> Self {$/;"	f
add	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn add(mut self, p: ObjectPath<M>) -> Self {$/;"	f
add	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn add<I: Into<Arc<Interface<M, D>>>>(mut self, s: I) -> Self {$/;"	f
add	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn add<I: Into<Arc<ObjectPath<M, D>>>>(mut self, s: I) -> Self {$/;"	f
add_m	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn add_m(mut self, m: Method<M>) -> Self { self.methods.insert(m.name.clone(), Arc::new(m)); self }$/;"	f
add_m	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn add_m<I: Into<Arc<Method<M, D>>>>(mut self, m: I) -> Self {$/;"	f
add_match	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn add_match(&self, rule: &str) -> Result<(), Error> {$/;"	f
add_o_ref	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn add_o_ref(&mut self, p: ObjectPath<M>) -> Arc<ObjectPath<M>> {$/;"	f
add_p	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn add_p(mut self, p: Property<M>) -> Self { self.properties.insert(p.name.clone(), Arc::new(p)); self }$/;"	f
add_p	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn add_p<I: Into<Arc<Property<M, D>>>>(mut self, p: I) -> Self {$/;"	f
add_p_arc	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn add_p_arc(mut self, p: Arc<Property<M>>) -> Self { self.properties.insert(p.name.clone(), p); self }$/;"	f
add_p_ref	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn add_p_ref(&mut self, p: Property<M>) -> Arc<Property<M>> {$/;"	f
add_property_handler	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn add_property_handler(&mut self) {$/;"	f
add_property_handler	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    fn add_property_handler(&mut self) {$/;"	f
add_property_handler	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    fn add_property_handler(&mut self) {$/;"	f
add_s	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn add_s(mut self, s: Signal) -> Self { self.signals.insert(s.name.clone(), Arc::new(s)); self }$/;"	f
add_s	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn add_s<I: Into<Arc<Signal<D>>>>(mut self, s: I) -> Self {$/;"	f
add_s_arc	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn add_s_arc(mut self, s: Arc<Signal>) -> Self { self.signals.insert(s.name.clone(), s); self }$/;"	f
add_s_ref	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn add_s_ref(&mut self, s: Signal) -> Arc<Signal> {$/;"	f
add_watch_cb	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^extern "C" fn add_watch_cb(watch: *mut ffi::DBusWatch, data: *mut c_void) -> u32 {$/;"	f
annotate	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn annotate<N: Into<String>, V: Into<String>>(mut self, name: N, value: V) -> Self {$/;"	f
annotate	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    pub fn annotate<N: ToString, V: ToString>(&mut self, name: N, value: V) {$/;"	f
annotate	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn annotate<N: Into<String>, V: Into<String>>(mut self, name: N, value: V) -> Self {$/;"	f
annotate	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn annotate<N: Into<String>, V: Into<String>>(mut self, name: N, value: V) -> Self {$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn append(&self, i: &mut IterAppend) {$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn append(self, i: &mut IterAppend) {$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn append(&self, i: &mut IterAppend) { <$t as Append>::append(self.clone(), i) }$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn append(&self, i: &mut IterAppend) { arg_append_basic(&mut i.0, ArgType::$s, *self as i64) }$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn append(&self, i: &mut IterAppend) { arg_append_str(&mut i.0, ArgType::$s, self.as_cstr()) }$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn append(mut self, i: &mut IterAppend) {$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn append(self, i: &mut IterAppend) { arg_append_basic(&mut i.0, ArgType::$s, self as i64) }$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn append(self, i: &mut IterAppend) { arg_append_basic(&mut i.0, ArgType::Boolean, if self {1} else {0}) }$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn append(self, i: &mut IterAppend) { arg_append_f64(&mut i.0, ArgType::Double, self) }$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn append(self, i: &mut IterAppend) {$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn append<T: Append>(&mut self, a: T) { a.append(self) }$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn append(&self, &mut IterAppend);$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn append(&self, i: &mut IterAppend) { (&**self).append(i) }$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn append(self, &mut IterAppend);$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn append(self, i: &mut IterAppend) { let q: T = *self; q.append(i) }$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn append(self, i: &mut IterAppend) { self.clone().append(i) }$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn append(&self, i: &mut IterAppend) { message::append_messageitem(&mut i.0, self) }$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn append(&self, i: &mut IterAppend) {$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn append(self, i: &mut IterAppend) {$/;"	f
append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn append<I: Into<MessageItem>>(self, v: I) -> Self {$/;"	f
append1	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn append1<A: Append>(mut self, a: A) -> Self {$/;"	f
append2	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn append2<A1: Append, A2: Append>(mut self, a1: A1, a2: A2) -> Self {$/;"	f
append3	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn append3<A1: Append, A2: Append, A3: Append>(mut self, a1: A1, a2: A2, a3: A3) -> Self {$/;"	f
append_array	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn append_array<F: FnOnce(&mut IterAppend<'a>)>(&mut self, inner_sig: &Signature, f: F) {$/;"	f
append_container	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    fn append_container<F: FnOnce(&mut IterAppend<'a>)>(&mut self, arg_type: ArgType, sig: Option<&CStr>, f: F) {$/;"	f
append_dict	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn append_dict<F: FnOnce(&mut IterAppend<'a>)>(&mut self, key_sig: &Signature, value_sig: &Signature, f: F) {$/;"	f
append_dict_entry	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn append_dict_entry<F: FnOnce(&mut IterAppend<'a>)>(&mut self, f: F) {$/;"	f
append_items	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn append_items(&mut self, v: &[MessageItem]) {$/;"	f
append_messageitem	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^pub fn append_messageitem(i: &mut ffi::DBusMessageIter, m: &MessageItem) {$/;"	f
append_ref	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn append_ref<A: RefArg>(mut self, r: &[A]) -> Self {$/;"	f
append_struct	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn append_struct<F: FnOnce(&mut IterAppend<'a>)>(&mut self, f: F) {$/;"	f
append_variant	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn append_variant<F: FnOnce(&mut IterAppend<'a>)>(&mut self, inner_sig: &Signature, f: F) {$/;"	f
arg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn arg<A: Into<Argument>>(mut self, a: A) -> Self { self.arguments.push(a.into()); self }$/;"	f
arg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn arg<A: Into<Argument>>(mut self, a: A) -> Self { self.arguments.push(a.into()); self }$/;"	f
arg_append_basic	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^fn arg_append_basic(i: *mut ffi::DBusMessageIter, arg_type: ArgType, v: i64) {$/;"	f
arg_append_f64	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^fn arg_append_f64(i: *mut ffi::DBusMessageIter, arg_type: ArgType, v: f64) {$/;"	f
arg_append_str	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^fn arg_append_str(i: *mut ffi::DBusMessageIter, arg_type: ArgType, v: &CStr) {$/;"	f
arg_get_basic	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^fn arg_get_basic(i: *mut ffi::DBusMessageIter, arg_type: ArgType) -> Option<i64> {$/;"	f
arg_get_f64	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^fn arg_get_f64(i: *mut ffi::DBusMessageIter, arg_type: ArgType) -> Option<f64> {$/;"	f
arg_get_str	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^unsafe fn arg_get_str<'a>(i: *mut ffi::DBusMessageIter, arg_type: ArgType) -> Option<&'a CStr> {$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn arg_type(&self) -> ArgType { ArgType::Array }$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn arg_type() -> ArgType { ArgType::Array }$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn arg_type(&self) -> ArgType { <$t as Arg>::arg_type() }$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn arg_type(&self) -> ArgType { ArgType::$s }$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn arg_type() -> ArgType { ArgType::$s }$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn arg_type() -> ArgType { ArgType::Boolean }$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn arg_type() -> ArgType { ArgType::Double }$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn arg_type() -> ArgType { ArgType::String }$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn arg_type() -> ArgType { ArgType::UnixFd }$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn arg_type(&mut self) -> ArgType {$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn arg_type(&self) -> ArgType { (&**self).arg_type() }$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn arg_type(&self) -> ArgType;$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn arg_type() -> ArgType { T::arg_type() }$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn arg_type() -> ArgType;$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn arg_type(&self) -> ArgType { ArgType::Struct }$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn arg_type(&self) -> ArgType { ArgType::Variant } $/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn arg_type(&self) -> ArgType { ArgType::from_i32(self.array_type()).unwrap() }$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn arg_type() -> ArgType { ArgType::Struct }$/;"	f
arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn arg_type() -> ArgType { ArgType::Variant }$/;"	f
args	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn args<Z: Into<Argument>, A: IntoIterator<Item=Z>>(mut self, a: A) -> Self {$/;"	f
args	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn args<Z: Into<Argument>, A: IntoIterator<Item=Z>>(mut self, a: A) -> Self {$/;"	f
array_append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^fn array_append<T: Arg, F: FnMut(&T, &mut IterAppend)>(z: &[T], i: &mut IterAppend, mut f: F) {$/;"	f
array_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn array_type(&self) -> i32 {$/;"	f
as_any	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn as_any(&self) -> &any::Any where Self: 'static { self }$/;"	f
as_any	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn as_any(&self) -> &any::Any { self }$/;"	f
as_any	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn as_any(&self) -> &any::Any where Self: 'static;$/;"	f
as_any	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn as_any(&self) -> &any::Any where T: 'static { (&**self).as_any() }$/;"	f
as_any	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn as_any(&self) -> &any::Any where Self: 'static { self }$/;"	f
as_any	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn as_any(&self) -> &any::Any where T: 'static { self }$/;"	f
as_any_mut	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn as_any_mut(&mut self) -> &mut any::Any where Self: 'static { self }$/;"	f
as_any_mut	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn as_any_mut(&mut self) -> &mut any::Any { self }$/;"	f
as_any_mut	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn as_any_mut(&mut self) -> &mut any::Any where Self: 'static;$/;"	f
as_any_mut	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn as_any_mut(&mut self) -> &mut any::Any where T: 'static { unreachable!() }$/;"	f
as_any_mut	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn as_any_mut<'a>(&'a mut $ss) -> &'a mut any::Any where T: 'static { $make_mut.as_any_mut() }$/;"	f
as_any_mut	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn as_any_mut(&mut self) -> &mut any::Any where Self: 'static { self }$/;"	f
as_any_mut	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn as_any_mut(&mut self) -> &mut any::Any where T: 'static { self }$/;"	f
as_cstr	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^    pub fn as_cstr(&self) -> &CStr { &self.0 }$/;"	f
as_i64	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn as_i64(&self) -> Option<i64> { let $i = *self; $ii }$/;"	f
as_i64	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn as_i64(&self) -> Option<i64> { let $i = self; $ii }$/;"	f
as_i64	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn as_i64(&self) -> Option<i64> { (&**self).as_i64() }$/;"	f
as_i64	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn as_i64(&self) -> Option<i64> { None }$/;"	f
as_i64	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn as_i64(&self) -> Option<i64> { self.0.as_i64() }$/;"	f
as_iter	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn as_iter<'a>(&'a self) -> Option<Box<Iterator<Item=&'a RefArg> + 'a>> {$/;"	f
as_iter	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn as_iter<'b>(&'b self) -> Option<Box<Iterator<Item=&'b RefArg> + 'b>> {$/;"	f
as_iter	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn as_iter<'a>(&'a self) -> Option<Box<Iterator<Item=&'a RefArg> + 'a>> { (&**self).as_iter() }$/;"	f
as_iter	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn as_iter<'a>(&'a self) -> Option<Box<Iterator<Item=&'a RefArg> + 'a>> { None }$/;"	f
as_iter	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn as_iter<'b>(&'b self) -> Option<Box<Iterator<Item=&'b RefArg> + 'b>> { (&**self).as_iter() }$/;"	f
as_iter	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn as_iter<'a>(&'a self) -> Option<Box<Iterator<Item=&'a RefArg> + 'a>> {$/;"	f
as_raw_fd	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn as_raw_fd(&self) -> RawFd {$/;"	f
as_raw_fd	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^    fn as_raw_fd(&self) -> RawFd { self.fd }$/;"	f
as_ref	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^    fn as_ref(&self) -> &CStr { &self.0 }$/;"	f
as_result	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn as_result(&mut self) -> Result<&mut Message, Error> {$/;"	f
as_str	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn as_str(&self) -> Option<&str> { Some(self) }$/;"	f
as_str	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn as_str(&self) -> Option<&str> { let $i = self; $ss }$/;"	f
as_str	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn as_str(self) -> &'static str {$/;"	f
as_str	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn as_str(&self) -> Option<&str> { (&**self).as_str() }$/;"	f
as_str	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn as_str(&self) -> Option<&str> { None }$/;"	f
as_str	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn as_str(&self) -> Option<&str> { self.0.as_str() }$/;"	f
async	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^    fn async() {$/;"	f
box_method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn box_method<H>(h: H) -> Self$/;"	f
c_str_to_slice	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^fn c_str_to_slice(c: & *const c_char) -> Option<&str> {$/;"	f
call	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn call(&self, m: &Message, o: &ObjectPath<M>, i: &Tree<M>) -> MethodResult { self.cb.call_method(m, o, i) }$/;"	f
call	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn call(&self, minfo: &MethodInfo<M, D>) -> MethodResult { M::call_method(&self.cb.0, minfo) }$/;"	f
call_getprop	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    fn call_getprop(&Self::GetProp, &mut IterAppend, &PropInfo<Self, D>) -> Result<(), MethodErr>;$/;"	f
call_getprop	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    fn call_getprop(p: &Self::GetProp, i: &mut IterAppend, pinfo: &PropInfo<Self, D>)$/;"	f
call_method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn call_method(&self, m: &Message, o: &ObjectPath<MethodFn<'a>>, i: &Tree<MethodFn<'a>>) -> MethodResult { self.0(m, o, i) }$/;"	f
call_method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn call_method(&self, m: &Message, o: &ObjectPath<MethodFnMut<'a>>, i: &Tree<MethodFnMut<'a>>) -> MethodResult {$/;"	f
call_method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn call_method(&self, m: &Message, o: &ObjectPath<MethodSync>, i: &Tree<MethodSync>) -> MethodResult { self.0(m, o, i) }$/;"	f
call_method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn call_method(&self, m: &Message, o: &ObjectPath<Self>, i: &Tree<Self>) -> MethodResult;$/;"	f
call_method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    fn call_method(&Self::Method, &MethodInfo<Self, D>) -> MethodResult;$/;"	f
call_method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    fn call_method(p: &Self::Method, minfo: &MethodInfo<Self, D>)$/;"	f
call_setprop	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    fn call_setprop(&Self::SetProp, &mut Iter, &PropInfo<Self, D>) -> Result<(), MethodErr>;$/;"	f
call_setprop	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    fn call_setprop(p: &Self::SetProp, i: &mut Iter, pinfo: &PropInfo<Self, D>)$/;"	f
can_get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn can_get(&self) -> Result<(), MethodErr> {$/;"	f
can_set	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn can_set(&self, i: Option<arg::Iter>) -> Result<(), MethodErr> {$/;"	f
cast	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^pub fn cast<'a, T: 'static>(a: &'a (RefArg + 'static)) -> Option<&'a T> { a.as_any().downcast_ref() }$/;"	f
cast_mut	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^pub fn cast_mut<'a, T: 'static>(a: &'a mut (RefArg + 'static)) -> Option<&'a mut T> { a.as_any_mut().downcast_mut() }$/;"	f
cause	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    fn cause(&self) -> Option<&error::Error> { None }$/;"	f
check	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^fn check(f: &str, i: u32) { if i == 0 { panic!("D-Bus error: '{}' failed", f) }} $/;"	f
check_valid	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^    fn check_valid(_: *const c_char) -> Result<(), String> { Ok(()) }$/;"	f
check_valid	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^    fn check_valid(c: *const c_char) -> Result<(), String> {$/;"	f
children	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn children(&self, o: &ObjectPath<M>, direct_only: bool) -> Vec<&ObjectPath<M>> {$/;"	f
children	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    fn children(&self, o: &ObjectPath<M, D>, direct_only: bool) -> Vec<&ObjectPath<M, D>> {$/;"	f
clone	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn clone(&self) -> OwnedFd {$/;"	f
conn	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    fn conn(&self) -> *mut ffi::DBusConnection {$/;"	f
conn_handle	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^pub fn conn_handle(c: &Connection) -> *mut ffi::DBusConnection {$/;"	f
connection	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    fn connection() {$/;"	f
copy_to_iter	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn copy_to_iter(i: &mut ffi::DBusMessageIter, v: &[MessageItem]) {$/;"	f
create_fnmut	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^fn create_fnmut() {$/;"	f
create_iface	/home/spowell/programming/rust/dbus/server/src/server.rs	/^fn create_iface(check_complete_s: mpsc::Sender<i32>) -> Interface<MTFn<TData>, TData> {$/;"	f
create_tree	/home/spowell/programming/rust/dbus/server/src/server.rs	/^fn create_tree(devices: &[Arc<Device>], iface: &Arc<Interface<MTFn<TData>, TData>>)$/;"	f
cstring_wrapper	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^macro_rules! cstring_wrapper {$/;"	d
dbus_bus_add_match	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_bus_add_match(conn: *mut DBusConnection, rule: *const c_char,$/;"	f
dbus_bus_get_private	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_bus_get_private(t: DBusBusType, error: *mut DBusError) -> *mut DBusConnection;$/;"	f
dbus_bus_get_unique_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_bus_get_unique_name(conn: *mut DBusConnection) -> *const c_char;$/;"	f
dbus_bus_release_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_bus_release_name(conn: *mut DBusConnection, name: *const c_char,$/;"	f
dbus_bus_remove_match	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_bus_remove_match(conn: *mut DBusConnection, rule: *const c_char,$/;"	f
dbus_bus_request_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_bus_request_name(conn: *mut DBusConnection, name: *const c_char,$/;"	f
dbus_connection_add_filter	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_connection_add_filter(conn: *mut DBusConnection, function: DBusHandleMessageFunction,$/;"	f
dbus_connection_close	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_connection_close(conn: *mut DBusConnection);$/;"	f
dbus_connection_dispatch	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_connection_dispatch(conn: *mut DBusConnection) -> DBusDispatchStatus;$/;"	f
dbus_connection_flush	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_connection_flush(conn: *mut DBusConnection);$/;"	f
dbus_connection_list_registered	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_connection_list_registered(conn: *mut DBusConnection,$/;"	f
dbus_connection_read_write_dispatch	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_connection_read_write_dispatch(conn: *mut DBusConnection,$/;"	f
dbus_connection_remove_filter	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_connection_remove_filter(conn: *mut DBusConnection, function: DBusHandleMessageFunction,$/;"	f
dbus_connection_send	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_connection_send(conn: *mut DBusConnection,$/;"	f
dbus_connection_send_with_reply_and_block	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_connection_send_with_reply_and_block(conn: *mut DBusConnection,$/;"	f
dbus_connection_set_exit_on_disconnect	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_connection_set_exit_on_disconnect(conn: *mut DBusConnection, enable: u32);$/;"	f
dbus_connection_set_watch_functions	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_connection_set_watch_functions(conn: *mut DBusConnection, add_function: DBusAddWatchFunction,$/;"	f
dbus_connection_try_register_object_path	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_connection_try_register_object_path(conn: *mut DBusConnection,$/;"	f
dbus_connection_unref	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_connection_unref(conn: *mut DBusConnection);$/;"	f
dbus_connection_unregister_object_path	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_connection_unregister_object_path(conn: *mut DBusConnection,$/;"	f
dbus_error_free	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_error_free(error: *mut DBusError);$/;"	f
dbus_error_init	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_error_init(error: *mut DBusError);$/;"	f
dbus_free	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_free(memory: *mut c_void);$/;"	f
dbus_free_string_array	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_free_string_array(str_array: *mut *mut c_char) -> c_void;$/;"	f
dbus_message_get_interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_get_interface(message: *mut DBusMessage) -> *const c_char;$/;"	f
dbus_message_get_member	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_get_member(message: *mut DBusMessage) -> *const c_char;$/;"	f
dbus_message_get_path	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_get_path(message: *mut DBusMessage) -> *const c_char;$/;"	f
dbus_message_get_reply_serial	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_get_reply_serial(message: *mut DBusMessage) -> u32;$/;"	f
dbus_message_get_sender	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_get_sender(message: *mut DBusMessage) -> *const c_char;$/;"	f
dbus_message_get_serial	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_get_serial(message: *mut DBusMessage) -> u32;$/;"	f
dbus_message_get_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_get_type(message: *mut DBusMessage) -> c_int;$/;"	f
dbus_message_is_method_call	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_is_method_call(message: *mut DBusMessage, iface: *const c_char, method: *const c_char) -> u32;$/;"	f
dbus_message_is_signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_is_signal(message: *mut DBusMessage, iface: *const c_char, signal_name: *const c_char) -> u32;$/;"	f
dbus_message_iter_append_basic	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_iter_append_basic(iter: *mut DBusMessageIter, t: c_int, value: *const c_void) -> u32;$/;"	f
dbus_message_iter_append_fixed_array	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_iter_append_fixed_array(iter: *mut DBusMessageIter, element_type: c_int,$/;"	f
dbus_message_iter_close_container	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_iter_close_container(iter: *mut DBusMessageIter, sub: *mut DBusMessageIter) -> u32;$/;"	f
dbus_message_iter_get_arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_iter_get_arg_type(iter: *mut DBusMessageIter) -> c_int;$/;"	f
dbus_message_iter_get_basic	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_iter_get_basic(iter: *mut DBusMessageIter, value: *mut c_void);$/;"	f
dbus_message_iter_get_element_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_iter_get_element_type(iter: *mut DBusMessageIter) -> c_int;$/;"	f
dbus_message_iter_get_fixed_array	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_iter_get_fixed_array(iter: *mut DBusMessageIter,$/;"	f
dbus_message_iter_get_signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_iter_get_signature(iter: *mut DBusMessageIter) -> *mut c_char;$/;"	f
dbus_message_iter_init	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_iter_init(message: *mut DBusMessage, iter: *mut DBusMessageIter) -> u32;$/;"	f
dbus_message_iter_init_append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_iter_init_append(message: *mut DBusMessage, iter: *mut DBusMessageIter);$/;"	f
dbus_message_iter_next	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_iter_next(iter: *mut DBusMessageIter) -> u32;$/;"	f
dbus_message_iter_open_container	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_iter_open_container(iter: *mut DBusMessageIter, _type: c_int,$/;"	f
dbus_message_iter_recurse	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_iter_recurse(iter: *mut DBusMessageIter, subiter: *mut DBusMessageIter);$/;"	f
dbus_message_new_error	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_new_error(message: *mut DBusMessage,$/;"	f
dbus_message_new_method_call	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_new_method_call(destination: *const c_char, path: *const c_char,$/;"	f
dbus_message_new_method_return	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_new_method_return(message: *mut DBusMessage) -> *mut DBusMessage;$/;"	f
dbus_message_new_signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_new_signal(path: *const c_char,$/;"	f
dbus_message_ref	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_ref(message: *mut DBusMessage) -> *mut DBusMessage;$/;"	f
dbus_message_set_serial	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_set_serial(message: *mut DBusMessage, serial: u32);$/;"	f
dbus_message_unref	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_message_unref(message: *mut DBusMessage);$/;"	f
dbus_set_error	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_set_error(error: *mut DBusError, name: *const c_char, message: *const c_char, ...);$/;"	f
dbus_set_error_from_message	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_set_error_from_message(error: *mut DBusError, message: *mut DBusMessage) -> u32;$/;"	f
dbus_signature_validate_single	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_signature_validate_single(signature: *const c_char, error: *mut DBusError) -> u32;$/;"	f
dbus_threads_init_default	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_threads_init_default() -> c_int;$/;"	f
dbus_validate_bus_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_validate_bus_name(busname: *const c_char, error: *mut DBusError) -> u32;$/;"	f
dbus_validate_error_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_validate_error_name(errorname: *const c_char, error: *mut DBusError) -> u32;$/;"	f
dbus_validate_interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_validate_interface(interface: *const c_char, error: *mut DBusError) -> u32;$/;"	f
dbus_validate_member	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_validate_member(member: *const c_char, error: *mut DBusError) -> u32;$/;"	f
dbus_validate_path	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_validate_path(path: *const c_char, error: *mut DBusError) -> u32;$/;"	f
dbus_watch_get_enabled	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_watch_get_enabled(watch: *mut DBusWatch) -> u32;$/;"	f
dbus_watch_get_flags	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_watch_get_flags(watch: *mut DBusWatch) -> c_uint;$/;"	f
dbus_watch_get_unix_fd	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_watch_get_unix_fd(watch: *mut DBusWatch) -> c_int;$/;"	f
dbus_watch_handle	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/ffi.rs	/^    pub fn dbus_watch_handle(watch: *mut DBusWatch, flags: c_uint) -> u32;$/;"	f
default	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^    fn default() -> Path<'a> { Path(Cow::Borrowed(unsafe { CStr::from_ptr(b"\/\\0".as_ptr() as *const c_char)})) }$/;"	f
default_get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn default_get(mut self) -> Self {$/;"	f
default_get_refarg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn default_get_refarg(mut self) -> Self {$/;"	f
deprecated	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn deprecated(self) -> Self { self.annotate("org.freedesktop.DBus.Deprecated", "true") }$/;"	f
deprecated	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn deprecated(self) -> Self { self.annotate("org.freedesktop.DBus.Deprecated", "true") }$/;"	f
deprecated	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn deprecated(self) -> Self { self.annotate("org.freedesktop.DBus.Deprecated", "true") }$/;"	f
deref	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^    fn deref(&self) -> &str { str::from_utf8(self.0.to_bytes()).unwrap() }$/;"	f
deref_impl	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^macro_rules! deref_impl {$/;"	d
description	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    fn description(&self) -> &str { "D-Bus argument type mismatch" }$/;"	f
description	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    fn description(&self) -> &str { "D-Bus error" }$/;"	f
description	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    pub fn description(&self) -> &str { &self.1 }$/;"	f
dict_of_dicts	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn dict_of_dicts() {$/;"	f
drop	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    fn drop(&mut self) {$/;"	f
drop	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    fn drop(&mut self) {$/;"	f
drop	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn drop(&mut self) {$/;"	f
drop	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    fn drop(&mut self) {$/;"	f
emit	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn emit(&self, items: &[MessageItem]) -> Message {$/;"	f
emit	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn emit(&self, p: &Path<'static>, i: &IfaceName<'static>, items: &[MessageItem]) -> Message {$/;"	f
emits_changed	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn emits_changed(mut self, e: EmitsChangedSignal) -> Self {$/;"	f
emits_changed	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn emits_changed(mut self, e: EmitsChangedSignal) -> Self {$/;"	f
empty	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    fn empty() -> Error {$/;"	f
entry_sig	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn entry_sig() -> String { format!("{{{}{}}}", K::signature(), V::signature()) } $/;"	f
error	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn error(&self, error_name: &ErrorName, error_message: &CStr) -> Message {$/;"	f
errorname	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    pub fn errorname(&self) -> &ErrorName<'static> { &self.0 }$/;"	f
expected_arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn expected_arg_type(&self) -> ArgType { self.expected }$/;"	f
factory_test	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^fn factory_test() {$/;"	f
failed	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn failed<T: fmt::Display>(a: &T) -> MethodErr {$/;"	f
failed	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    pub fn failed<T: fmt::Display>(a: &T) -> MethodErr {$/;"	f
fd	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^    pub fn fd(&self) -> RawFd { self.fd }$/;"	f
ffi_iter	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^fn ffi_iter() -> ffi::DBusMessageIter { unsafe { mem::zeroed() }} $/;"	f
filter_message_cb	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^extern "C" fn filter_message_cb(conn: *mut ffi::DBusConnection, msg: *mut ffi::DBusMessage,$/;"	f
fmt	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {$/;"	f
fmt	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    fn fmt(&self, f: &mut std::fmt::Formatter) -> Result<(), std::fmt::Error> {$/;"	f
fmt	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    fn fmt(&self, f: &mut std::fmt::Formatter) -> Result<(),std::fmt::Error> {$/;"	f
fmt	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {$/;"	f
fmt	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { write!(f, "<Fn + Send + Sync>") }$/;"	f
fmt	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { write!(f, "<Fn>") }$/;"	f
fmt	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { write!(f, "<FnMut>") }$/;"	f
fmt	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {$/;"	f
fmt	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { write!(f, "<GetProp>") }$/;"	f
fmt	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { write!(f, "<Method>") }$/;"	f
fmt	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result { write!(f, "<SetProp>") }$/;"	f
fn_customdata	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^fn fn_customdata() {$/;"	f
found_arg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn found_arg_type(&self) -> ArgType { self.found }$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    fn from(t: arg::TypeMismatchError) -> Error {$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    fn from(t: tree::MethodErr) -> Error {$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^            fn from(i: &'a MessageItem) -> Result<$t,()> {$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn from(i: &'a MessageItem) -> Result<&'a MessageItem,()> { if let &MessageItem::Variant(ref b) = i { Ok(&**b) } else { Err(()) } }$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn from(i: &'a MessageItem) -> Result<&'a OwnedFd,()> { if let &MessageItem::UnixFd(ref b) = i { Ok(b) } else { Err(()) } }$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn from(i: &'a MessageItem) -> Result<&'a Path<'static>,()> { if let &MessageItem::ObjectPath(ref b) = i { Ok(&b) } else { Err(()) } }$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn from(i: &'a MessageItem) -> Result<&'a String,()> { if let &MessageItem::Str(ref b) = i { Ok(&b) } else { Err(()) } }$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn from(i: &'a MessageItem) -> Result<&'a Vec<MessageItem>,()> {$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn from(i: &'a MessageItem) -> Result<&'a [MessageItem],()> { i.inner::<&Vec<MessageItem>>().map(|s| &**s) }$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn from(i: &'a MessageItem) -> Result<&'a str,()> {$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn from(i: &'a MessageItem) -> Result<(&'a MessageItem, &'a MessageItem),()> {$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn from(i: &'a MessageItem) -> Result<Self, ()>;$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn from(i: &'a [T]) -> MessageItem {$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn from(i: (MessageItem, MessageItem)) -> MessageItem {$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn from(i: Box<MessageItem>) -> MessageItem { MessageItem::Variant(i) }$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn from((n, s): (N, S)) -> Argument { Argument(Some(n.into()), s.into()) }$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn from((t, m): (T, M)) -> MethodErr { MethodErr(t.into(), m.into()) }$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn from(t: &'a str) -> Argument { Argument(None, String::from(t).into()) }$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn from(t: Signature<'static>) -> Argument { Argument(None, t) }$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^    fn from(s: Cow<'m, str>) -> $t<'m> { $/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    fn from((t, m): (T, M)) -> MethodErr { MethodErr(t.into(), m.into()) }$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    fn from(t: TypeMismatchError) -> MethodErr { ("org.freedesktop.DBus.Error.Failed", format!("{}", t)).into() }$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    fn from(t: dbusError) -> MethodErr {$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^    fn from((n, s): (N, S)) -> Argument { Argument(Some(n.into()), s.into()) }$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^    fn from(t: &'a str) -> Argument { Argument(None, String::from(t).into()) }$/;"	f
from	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^    fn from(t: Signature<'static>) -> Argument { Argument(None, t) }$/;"	f
from_dict	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn from_dict<E, I: Iterator<Item=Result<(String, MessageItem),E>>>(i: I) -> Result<MessageItem,E> {$/;"	f
from_i32	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn from_i32(i: i32) -> Result<ArgType, String> {$/;"	f
from_iter	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn from_iter(i: &mut ffi::DBusMessageIter) -> Vec<MessageItem> {$/;"	f
from_iter_single	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn from_iter_single(i: &mut ffi::DBusMessageIter) -> Option<MessageItem> {$/;"	f
from_revents	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn from_revents(revents: libc::c_short) -> c_uint {$/;"	f
from_slice	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^    pub fn from_slice(s: &'m [u8]) -> Result<$t<'m>, String> {$/;"	f
from_slice_unchecked	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^    pub unsafe fn from_slice_unchecked(s: &'m [u8]) -> $t<'m> {$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn get(i: &mut Iter<'a>) -> Option<&'a [T]> {$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn get(i: &mut Iter<'a>) -> Option<Array<'a, T, Iter<'a>>> {$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn get(i: &mut Iter<'a>) -> Option<Self> {$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn get(i: &mut Iter) -> Option<Self> { arg_get_basic(&mut i.0, ArgType::$s).map(|q| q as $t) }$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn get(i: &mut Iter) -> Option<Self> { arg_get_basic(&mut i.0, ArgType::Boolean).map(|q| q != 0) }$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn get(i: &mut Iter) -> Option<Self> { arg_get_f64(&mut i.0, ArgType::Double) }$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn get(i: &mut Iter) -> Option<Self> {$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn get(i: &mut Iter<'a>) -> Option<$t<'a>> { unsafe { arg_get_str(&mut i.0, ArgType::$s) }$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn get(i: &mut Iter<'a>) -> Option<$t<'static>> { unsafe {$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn get(i: &mut Iter<'a>) -> Option<&'a CStr> { unsafe { arg_get_str(&mut i.0, Self::arg_type()) }}$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn get(i: &mut Iter<'a>) -> Option<&'a str> { unsafe { arg_get_str(&mut i.0, ArgType::String) }$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn get(i: &mut Iter<'a>) -> Option<String> { <&str>::get(i).map(|s| String::from(s)) }$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn get<T: Get<'a>>(&mut self) -> Option<T> {$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn get(i: &mut Iter<'a>) -> Option<Self> { T::get(i).map(|v| $t::new(v)) }$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn get(i: &mut Iter<'a>) -> Option<Self>;$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn get(i: &mut Iter<'a>) -> Option<Self> {$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn get(i: &mut Iter<'a>) -> Option<Variant<Box<RefArg>>> {$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn get(i: &mut Iter<'a>) -> Option<Variant<Iter<'a>>> {$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn get(i: &mut Iter<'a>) -> Option<Variant<T>> {$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    fn get(&self) -> PropertyGetResult {$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    fn get(&self) -> PropertyGetResult;$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/prop.rs	/^    pub fn get(&mut self, propname: &str) -> Result<&MessageItem, Error> {$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/prop.rs	/^    pub fn get(&self, propname: &str) -> Result<MessageItem, Error> {$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^    fn get(&self, interfacename: &str, propertyname: &str) -> Result<super::arg::Variant<Box<super::arg::RefArg>>, super::Error> {$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^    fn get(&self, interfacename: &str, propertyname: &str) -> Result<super::arg::Variant<Box<super::arg::RefArg>>, super::Error>;$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn get(&self, p: &Path<'static>) -> Option<&Arc<ObjectPath<M, D>>> {$/;"	f
get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn get<S: Into<IfaceName<'static>> + Clone, F>(&self, s: S, f: F) -> Arc<Interface<M, D>>$/;"	f
get1	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn get1<'a, G1: Get<'a>>(&'a self) -> Option<G1> {$/;"	f
get2	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn get2<'a, G1: Get<'a>, G2: Get<'a>>(&'a self) -> (Option<G1>, Option<G2>) {$/;"	f
get3	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn get3<'a, G1: Get<'a>, G2: Get<'a>, G3: Get<'a>>(&'a self) -> (Option<G1>, Option<G2>, Option<G3>) {$/;"	f
get4	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn get4<'a, G1: Get<'a>, G2: Get<'a>, G3: Get<'a>, G4: Get<'a>>(&'a self) -> (Option<G1>, Option<G2>, Option<G3>, Option<G4>) {$/;"	f
get5	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn get5<'a, G1: Get<'a>, G2: Get<'a>, G3: Get<'a>, G4: Get<'a>, G5: Get<'a>>(&'a self) -> (Option<G1>, Option<G2>, Option<G3>, Option<G4>, Option<G5>) {$/;"	f
get_all	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/prop.rs	/^    pub fn get_all(&mut self) -> Result<(), Error> {$/;"	f
get_all	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/prop.rs	/^    pub fn get_all(&self) -> Result<BTreeMap<String, MessageItem>, Error> {$/;"	f
get_all	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^    fn get_all(&self, interfacename: &str) -> Result<::std::collections::HashMap<String, super::arg::Variant<Box<super::arg::RefArg>>>, super::Error> {$/;"	f
get_all	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^    fn get_all(&self, interfacename: &str) -> Result<::std::collections::HashMap<String, super::arg::Variant<Box<super::arg::RefArg>>>, super::Error>;$/;"	f
get_array_refarg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^pub fn get_array_refarg<'a>(i: &mut Iter<'a>) -> Box<RefArg> {$/;"	f
get_as_variant	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn get_as_variant(&self, i: &mut arg::IterAppend, pinfo: &PropInfo<M, D>) -> Result<(), MethodErr> {$/;"	f
get_data	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn get_data(&self) -> &D::Method { &self.data }$/;"	f
get_data	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn get_data(&self) -> &D::Property { &self.data }$/;"	f
get_data	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn get_data(&self) -> &D::Signal { &self.data }$/;"	f
get_data	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn get_data(&self) -> &D::Interface { &self.data }$/;"	f
get_data	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn get_data(&self) -> &D::ObjectPath { &self.data }$/;"	f
get_data	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn get_data(&self) -> &D::Tree { &self.data }$/;"	f
get_dict_refarg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^fn get_dict_refarg<'a, K, F: FnMut(&mut Iter<'a>) -> Option<K>>(i: &mut Iter<'a>, mut f: F) -> Box<RefArg>$/;"	f
get_emits_changed_signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    fn get_emits_changed_signal(&self, m: &PropInfo<M, D>) -> Result<Option<Message>, MethodErr> {$/;"	f
get_enabled_fds	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^    pub fn get_enabled_fds(&self) -> Vec<Watch> {$/;"	f
get_fixed_array_refarg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^fn get_fixed_array_refarg<'a, T: FixedArray + Clone + RefArg>(i: &mut Iter<'a>) -> Box<RefArg> {$/;"	f
get_iface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn get_iface<'a>(&'a self, i: Option<&'a CStr>) -> Result<&Arc<Interface<M>>, MethodErr> {$/;"	f
get_iface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    fn get_iface<'a>(&'a self, iface_name: &'a CStr) -> Result<&Arc<Interface<M, D>>, MethodErr> {$/;"	f
get_items	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn get_items(&self) -> Vec<MessageItem> {$/;"	f
get_machine_id	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^    fn get_machine_id(&self) -> Result<String, super::Error> {$/;"	f
get_machine_id	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^    fn get_machine_id(&self) -> Result<String, super::Error>;$/;"	f
get_managed_objects	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn get_managed_objects(&self, t: &Tree<M>) -> MessageItem {$/;"	f
get_managed_objects	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^    fn get_managed_objects(&self) -> Result<::std::collections::HashMap<super::Path<'static>, ::std::collections::HashMap<String, ::std::collections::HashMap<String, super::arg::Variant<Box<super::arg::RefArg>>>>>, super::Error> {$/;"	f
get_managed_objects	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^    fn get_managed_objects(&self) -> Result<::std::collections::HashMap<super::Path<'static>, ::std::collections::HashMap<String, ::std::collections::HashMap<String, super::arg::Variant<Box<super::arg::RefArg>>>>>, super::Error>;$/;"	f
get_managed_objects	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    fn get_managed_objects(&self, m: &MethodInfo<M, D>) -> MethodResult {$/;"	f
get_message_ptr	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^pub fn get_message_ptr<'a>(m: &Message) -> *mut ffi::DBusMessage {$/;"	f
get_messageitem	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^pub fn get_messageitem(i: &mut ffi::DBusMessageIter) -> Option<MessageItem> {$/;"	f
get_mut	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    fn get_mut(&mut self) -> &mut ffi::DBusError { &mut self.e }$/;"	f
get_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn get_name(&self) -> &Member<'static> { &self.name }$/;"	f
get_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn get_name(&self) -> &str { &self.name }$/;"	f
get_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn get_name(&self) -> &IfaceName<'static> { &self.name }$/;"	f
get_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn get_name(&self) -> &Path<'static> { &self.name }$/;"	f
get_private	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn get_private(bus: BusType) -> Result<Connection, Error> {$/;"	f
get_refarg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn get_refarg(&mut self) -> Option<Box<RefArg + 'static>> {$/;"	f
get_reply_serial	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn get_reply_serial(&self) -> Option<u32> {$/;"	f
get_serial	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn get_serial(&self) -> u32 {$/;"	f
get_signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn get_signal(&self) -> Option<Message> {$/;"	f
get_signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    fn get_signal(&self, p: &PropInfo<M, D>) -> Message {$/;"	f
get_value	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn get_value(&self) -> MessageItem {$/;"	f
get_var_array_refarg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^fn get_var_array_refarg<'a, T: 'static + RefArg + Arg, F: FnMut(&mut Iter<'a>) -> Option<T>>$/;"	f
get_watch	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^    fn get_watch(&self, watch: *mut ffi::DBusWatch) -> Watch {$/;"	f
handle	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn handle(&self, m: &Message, t: &Tree<M>) -> MethodResult {$/;"	f
handle	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn handle(&self, m: &Message) -> Option<Vec<Message>> {$/;"	f
handle	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    fn handle(&self, m: &Message, t: &Tree<M, D>) -> MethodResult {$/;"	f
handle	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn handle(&self, m: &Message) -> Option<Vec<Message>> {$/;"	f
handle_ci	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    fn handle_ci(&mut self, ci: &ConnectionItem) -> Option<MsgHandlerResult> {$/;"	f
handle_message	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    pub fn handle_message(&mut self, msg: &mut Message) -> Option<Result<(), ()>> {$/;"	f
handle_msg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    fn handle_msg(&mut self, _msg: &Message) -> Option<MsgHandlerResult> { None }$/;"	f
handle_msg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    fn handle_msg(&mut self, msg: &Message) -> Option<MsgHandlerResult> {$/;"	f
hash	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^    fn hash<H: hash::Hasher>(&self, state: &mut H) {$/;"	f
headers	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn headers(&self) -> (MessageType, Option<String>, Option<String>, Option<String>) {$/;"	f
in_arg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn in_arg<A: Into<Argument>>(mut self, a: A) -> Self { self.i_args.push(a.into()); self }$/;"	f
in_arg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn in_arg<A: Into<Argument>>(mut self, a: A) -> Self { self.i_args.push(a.into()); self }$/;"	f
in_args	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn in_args<Z: Into<Argument>, A: IntoIterator<Item=Z>>(mut self, a: A) -> Self {$/;"	f
in_args	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn in_args<Z: Into<Argument>, A: IntoIterator<Item=Z>>(mut self, a: A) -> Self {$/;"	f
inarg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn inarg<A: arg::Arg, S: Into<String>>(mut self, s: S) -> Self { self.i_args.push((s.into(), A::signature()).into()); self }$/;"	f
inarg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn inarg<A: arg::Arg, S: Into<String>>(mut self, s: S) -> Self { self.i_args.push((s.into(), A::signature()).into()); self }$/;"	f
init_dbus	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^fn init_dbus() {$/;"	f
inner	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn inner<'a, T: FromMessageItem<'a>>(&'a self) -> Result<T, ()> {$/;"	f
insert	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn insert<N: Into<String>, V: Into<String>>(&mut self, n: N, v: V) {$/;"	f
insert	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn insert<I: Into<Arc<ObjectPath<M, D>>>>(&mut self, s: I) {$/;"	f
insert	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^    pub fn insert<N: Into<String>, V: Into<String>>(&mut self, n: N, v: V) {$/;"	f
insert_interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    pub fn insert_interface<N: ToString>(&mut self, name: N, i: Interface<'a>) {$/;"	f
integer_impl	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^macro_rules! integer_impl {$/;"	d
interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn interface<'a>(&'a self) -> Option<Interface<'a>> {$/;"	f
interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn interface<'b, T: Into<IfaceName<'static>>>(&self, t: T) -> Interface<MethodFn<'b>> { Interface::new(t.into()) }$/;"	f
interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn interface<'b, T: Into<IfaceName<'static>>>(&self, t: T) -> Interface<MethodFnMut<'b>> { Interface::new(t.into()) }$/;"	f
interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn interface<T: Into<IfaceName<'static>>>(&self, t: T) -> Interface<MethodSync> { Interface::new(t.into()) }$/;"	f
interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^    pub fn interface<T: Into<IfaceName<'static>>>(&self, name: T, data: D::Interface) -> Interface<M, D> {$/;"	f
into_fd	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn into_fd(self) -> RawFd {$/;"	f
into_static	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^    pub fn into_static(self) -> $t<'static> {$/;"	f
introspect	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn introspect(&self) -> &'static str {$/;"	f
introspect	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn introspect(&self, indent: &str) -> String {$/;"	f
introspect	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn introspect(&self, indent: &str, dir: &str) -> String { $/;"	f
introspect	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn introspect(&self, tree: &Tree<M>) -> String {$/;"	f
introspect	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    fn introspect(&self, _: &mut Message) -> MethodResult {$/;"	f
introspect	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^    fn introspect(&self) -> Result<String, super::Error> {$/;"	f
introspect	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^    fn introspect(&self) -> Result<String, super::Error>;$/;"	f
introspect	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    fn introspect(&self) -> &'static str {$/;"	f
introspect	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    fn introspect(&self, tree: &Tree<M, D>) -> String {$/;"	f
introspect	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^    fn introspect(&self, indent: &str, dir: &str) -> String { $/;"	f
introspect	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^    pub fn introspect(&self, indent: &str) -> String {$/;"	f
introspect_all	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn introspect_all(args: &[Argument], indent: &str, dir: &str) -> String {$/;"	f
introspect_anns	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^fn introspect_anns(anns: &Vec<Annotation>, indent: &str) -> String {$/;"	f
introspect_args	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^fn introspect_args(args: &Vec<Argument>, indent: &str, dir: &str) -> String {$/;"	f
introspect_args	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^pub fn introspect_args(args: &[Argument], indent: &str, dir: &str) -> String {$/;"	f
introspect_map	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^fn introspect_map<T, I: fmt::Display, C: Fn(&T) -> (String, String)>$/;"	f
introspect_map	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^fn introspect_map<T, C: Fn(&T) -> (String, String)>$/;"	f
introspect_map	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^fn introspect_map<I: fmt::Display, T: Introspect>$/;"	f
introspectable	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn introspectable(self) -> Self {$/;"	f
introspectable	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn introspectable(self) -> Self {$/;"	f
invalid_arg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn invalid_arg<T: fmt::Debug>(a: &T) -> MethodErr {$/;"	f
invalid_arg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    pub fn invalid_arg<T: fmt::Debug>(a: &T) -> MethodErr {$/;"	f
invalid_message	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    fn invalid_message() {$/;"	f
is_registered	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    pub fn is_registered(&self) -> bool {$/;"	f
issue24	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn issue24() {$/;"	f
iter	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn iter(&self, timeout_ms: i32) -> ConnectionItems {$/;"	f
iter_append	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn iter_append(&self, i: &mut ffi::DBusMessageIter) {$/;"	f
iter_append_array	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^fn iter_append_array(i: &mut ffi::DBusMessageIter, a: &[MessageItem], t: TypeSig<'static>) {$/;"	f
iter_append_basic	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn iter_append_basic(&self, i: &mut ffi::DBusMessageIter, v: i64) {$/;"	f
iter_append_dict	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^fn iter_append_dict(i: &mut ffi::DBusMessageIter, k: &MessageItem, v: &MessageItem) {$/;"	f
iter_append_f64	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^fn iter_append_f64(i: &mut ffi::DBusMessageIter, v: f64) {$/;"	f
iter_append_struct	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^fn iter_append_struct(i: &mut ffi::DBusMessageIter, a: &[MessageItem]) {$/;"	f
iter_append_variant	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^fn iter_append_variant(i: &mut ffi::DBusMessageIter, a: &MessageItem) {$/;"	f
iter_get_basic	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^fn iter_get_basic(i: &mut ffi::DBusMessageIter) -> i64 {$/;"	f
iter_get_f64	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^fn iter_get_f64(i: &mut ffi::DBusMessageIter) -> f64 {$/;"	f
iter_init	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn iter_init<'a>(&'a self) -> Iter<'a> { Iter::new(&self) }$/;"	f
list_registered_object_paths	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn list_registered_object_paths(&self, path: &str) -> Vec<String> {$/;"	f
main	/home/spowell/programming/rust/dbus/server/src/main.rs	/^fn main() {$/;"	f
main	/home/spowell/programming/rust/dbus/server/src/server.rs	/^fn main() {$/;"	f
make	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^    pub fn make<A: super::arg::Arg>() -> Signature<'static> { A::signature() }$/;"	f
make_getprop	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    fn make_getprop<H>(h: H) -> Box<Self::GetProp>$/;"	f
make_method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    fn make_method<H>(h: H) -> Box<Self::Method>$/;"	f
make_objpath	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^fn make_objpath<'a>(c: &'a Connection) -> ObjectPath<'a> {$/;"	f
make_sig	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^fn make_sig() {$/;"	f
map	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/prop.rs	/^    pub fn map(&self) -> &BTreeMap<String, MessageItem> { &self.map }$/;"	f
map_mut	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/prop.rs	/^    pub fn map_mut(&mut self) -> &mut BTreeMap<String, MessageItem> { &mut self.map }$/;"	f
member	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn member<'a>(&'a self) -> Option<Member<'a>> {$/;"	f
message	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    pub fn message(&self) -> Option<&str> {$/;"	f
message_from_ptr	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^pub fn message_from_ptr(ptr: *mut ffi::DBusMessage, add_ref: bool) -> Message {$/;"	f
message_listnames	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    fn message_listnames() {$/;"	f
message_namehasowner	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    fn message_namehasowner() {$/;"	f
message_reply	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^fn message_reply() {$/;"	f
message_set_serial	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^pub fn message_set_serial(m: &mut Message, s: u32) {$/;"	f
message_types	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn message_types() {$/;"	f
message_types	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn message_types() {$/;"	f
method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn method<'b, H: 'b, T>(&self, t: T, handler: H) -> Method<MethodFn<'b>>$/;"	f
method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn method<'b, H: 'b, T>(&self, t: T, handler: H) -> Method<MethodFnMut<'b>>$/;"	f
method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn method<H, T>(&self, t: T, handler: H) -> Method<MethodSync>$/;"	f
method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^    pub fn method<H, T>(&self, t: T, data: D::Method, handler: H) -> Method<MTFn<D>, D>$/;"	f
method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^    pub fn method<H, T>(&self, t: T, data: D::Method, handler: H) -> Method<MTFnMut<D>, D>$/;"	f
method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^    pub fn method<H, T>(&self, t: T, data: D::Method, handler: H) -> Method<MTSync<D>, D>$/;"	f
method_call	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn method_call(destination: &BusName, path: &Path, iface: &Interface, name: &Member) -> Message {$/;"	f
method_call_with_args	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn method_call_with_args<F: FnOnce(&mut Message)>(&self, i: &Interface, m: &Member, f: F) -> Result<Message, Error> {$/;"	f
method_return	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn method_return(&self) -> Message {$/;"	f
method_sync	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn method_sync<H, T>(&self, t: T, handler: H) -> Method<M>$/;"	f
msg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn msg(&self) -> Message { self.emit(&[]) }$/;"	f
msg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn msg(&self, p: &Path<'static>, i: &IfaceName<'static>) -> Message {$/;"	f
msg_handlers	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn msg_handlers(&mut self) -> &mut Vec<Box<MsgHandler>> { &mut self.handlers }$/;"	f
msg_internal_str	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn msg_internal_str<'a>(&'a self, c: *const libc::c_char) -> Option<&'a [u8]> {$/;"	f
msg_type	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn msg_type(&self) -> MessageType {$/;"	f
msgitem_convert	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^macro_rules! msgitem_convert {$/;"	d
name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    pub fn name(&self) -> Option<&str> {$/;"	f
name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^    pub fn name(&self) -> Option<&str> { self.0.as_ref().map(|s| &**s) }$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    pub fn new<J: IntoIterator<IntoIter=I, Item=(K, V)>>(j: J) -> Dict<'a, K, V, I> { Dict(j.into_iter(), PhantomData) }$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    pub fn new<J: IntoIterator<IntoIter=I, Item=T>>(j: J) -> Array<'a, T, I> { Array(j.into_iter(), PhantomData) }$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn new(m: &'a Message) -> Iter<'a> { $/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn new(m: &'a mut Message) -> IterAppend<'a> { $/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn new(fd: RawFd) -> OwnedFd {$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn new() -> Annotations { Annotations(None) }$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn new(n: Member<'static>, cb: M) -> Self { Method { name: Arc::new(n), i_args: vec!(),$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn new(p: Path<'static>) -> ObjectPath<M> {$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn new(s: String, i: MessageItem) -> Property<M> {$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn new(t: IfaceName<'static>) -> Interface<M> {$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn new(name: Option<String>, sig: Signature<'static>) -> Argument { Argument(name, sig) }$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    fn new<N: ToString>(name: N, sig: TypeSig<'a>, a: PropertyAccess<'a>) -> Property<'a> {$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    pub fn new(conn: &'a Connection, path: &str, introspectable: bool) -> ObjectPath<'a> {$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    pub fn new(m: Vec<Method<'a>>, p: Vec<Property<'a>>, s: Vec<Signal<'a>>) -> Interface<'a> {$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    pub fn new<N: ToString>(name: N, args: Vec<Argument<'a>>) -> Signal<'a> {$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    pub fn new<N: ToString>(name: N, in_args: Vec<Argument<'a>>,$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    pub fn new<T: Into<Cow<'a, str>>>(name: &'a str, sig: T) -> Argument<'a> {$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/prop.rs	/^    pub fn new(p: Props) -> PropHandler {$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/prop.rs	/^    pub fn new<N, P, I>(conn: &'a Connection, name: N, path: P, interface: I, timeout_ms: i32) -> Props<'a>$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^    pub fn new<S: Into<Vec<u8>>>(s: S) -> Result<$t<'m>, String> {$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn new() -> Arc<Self> { Arc::new(IfaceCache(Mutex::new(ArcMap::new()))) }$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^    pub fn new() -> Annotations { Annotations(None) }$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^    pub fn new(name: Option<String>, sig: Signature<'static>) -> Argument { Argument(name, sig) }$/;"	f
new	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^    pub fn new(c: &Connection, on_update: Box<Fn(Watch)>) -> Box<WatchList> {$/;"	f
new_array	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn new_array(v: Vec<MessageItem>) -> Result<MessageItem,ArrayError> {$/;"	f
new_array2	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn new_array2<D, I>(i: I) -> MessageItem$/;"	f
new_array3	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn new_array3<'b, D: 'b, I>(i: I) -> MessageItem$/;"	f
new_bogus	/home/spowell/programming/rust/dbus/server/src/server.rs	/^    fn new_bogus(index: i32) -> Device {$/;"	f
new_custom	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    pub fn new_custom(name: &str, message: &str) -> Error {$/;"	f
new_dbus_message_iter	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^fn new_dbus_message_iter() -> ffi::DBusMessageIter { unsafe { mem::zeroed() }}$/;"	f
new_error	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn new_error(m: &Message, error_name: &str, error_message: &str) -> Option<Message> {$/;"	f
new_fn	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn new_fn() -> Self { Factory(PhantomData) }$/;"	f
new_fn	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^    pub fn new_fn<D: DataType>() -> Factory<MTFn<D>, D> { Factory(IfaceCache::new()) }$/;"	f
new_fnmut	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn new_fnmut() -> Self { Factory(PhantomData) }$/;"	f
new_fnmut	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^    pub fn new_fnmut<D: DataType>() -> Factory<MTFnMut<D>, D> { Factory(IfaceCache::new()) }$/;"	f
new_interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^pub fn new_interface<M: MethodType<D>, D: DataType>(t: IfaceName<'static>, d: D::Interface) -> Interface<M, D> {$/;"	f
new_method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^pub fn new_method<M: MethodType<D>, D: DataType>(n: Member<'static>, data: D::Method, cb: Box<M::Method>) -> Method<M, D> {$/;"	f
new_method_call	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn new_method_call<'d, 'p, 'i, 'm, D, P, I, M>(destination: D, path: P, iface: I, method: M) -> Result<Message, String>$/;"	f
new_method_return	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn new_method_return(m: &Message) -> Option<Message> {$/;"	f
new_objectpath	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^pub fn new_objectpath<M: MethodType<D>, D: DataType>(n: Path<'static>, d: D::ObjectPath, cache: Arc<IfaceCache<M, D>>)$/;"	f
new_property	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^pub fn new_property<M: MethodType<D>, D: DataType>$/;"	f
new_refarg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    pub fn new_refarg<'a>(i: &mut Iter<'a>) -> Option<Self> {$/;"	f
new_ro	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    pub fn new_ro<N: ToString>(name: N, sig: TypeSig<'a>, h: Box<PropertyROHandler+'a>) -> Property<'a> {$/;"	f
new_rw	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    pub fn new_rw<N: ToString>(name: N, sig: TypeSig<'a>, h: Box<PropertyRWHandler+'a>) -> Property<'a> {$/;"	f
new_signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn new_signal<P, I, M>(path: P, iface: I, name: M) -> Result<Message, String>$/;"	f
new_signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^pub fn new_signal<D: DataType>(n: Member<'static>, data: D::Signal) -> Signal<D> {$/;"	f
new_sync	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn new_sync() -> Self { Factory(PhantomData) }$/;"	f
new_sync	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^    pub fn new_sync<D: DataType>() -> Factory<MTSync<D>, D> { Factory(IfaceCache::new()) }$/;"	f
new_tree	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^pub fn new_tree<M: MethodType<D>, D: DataType>(d: D::Tree) -> Tree<M, D> {$/;"	f
new_wo	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    pub fn new_wo<N: ToString>(name: N, sig: TypeSig<'a>, h: Box<PropertyWOHandler+'a>) -> Property<'a> {$/;"	f
next	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn next(&mut self) -> Option<(K, V)> {$/;"	f
next	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn next(&mut self) -> Option<T> {$/;"	f
next	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    fn next(&mut self) -> Option<Self::Item> {$/;"	f
next	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn next(&mut self) -> bool {$/;"	f
next	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    fn next(&mut self) -> Option<ConnectionItem> {$/;"	f
next	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn next(&mut self) -> Option<ConnectionItem> {$/;"	f
next	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    fn next(&mut self) -> Option<ConnectionItem> {$/;"	f
next	/home/spowell/programming/rust/dbus/server/src/main.rs	/^    fn next(&mut self) {$/;"	f
no_arg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn no_arg() -> MethodErr {$/;"	f
no_arg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    pub fn no_arg() -> MethodErr {$/;"	f
no_interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn no_interface<T: fmt::Display>(a: &T) -> MethodErr {$/;"	f
no_interface	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    pub fn no_interface<T: fmt::Display>(a: &T) -> MethodErr {$/;"	f
no_method	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    pub fn no_method<T: fmt::Display>(a: &T) -> MethodErr {$/;"	f
no_property	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn no_property<T: fmt::Display>(a: &T) -> MethodErr {$/;"	f
no_property	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    pub fn no_property<T: fmt::Display>(a: &T) -> MethodErr {$/;"	f
obj	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^pub mod obj {$/;"	m
object_manager	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn object_manager(self) -> Self {$/;"	f
object_manager	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn object_manager(mut self) -> Self {$/;"	f
object_path	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    fn object_path() {$/;"	f
object_path	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn object_path<'b, T: Into<Path<'static>>>(&self, t: T) -> ObjectPath<MethodFn<'b>> { ObjectPath::new(t.into()) }$/;"	f
object_path	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn object_path<'b, T: Into<Path<'static>>>(&self, t: T) -> ObjectPath<MethodFnMut<'b>> { ObjectPath::new(t.into()) }$/;"	f
object_path	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn object_path<T: Into<Path<'static>>>(&self, t: T) -> ObjectPath<MethodSync> { ObjectPath::new(t.into()) }$/;"	f
object_path	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^    pub fn object_path<T: Into<Path<'static>>>(&self, name: T, data: D::ObjectPath) -> ObjectPath<M, D> {$/;"	f
object_path_message_cb	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^extern "C" fn object_path_message_cb(conn: *mut ffi::DBusConnection, msg: *mut ffi::DBusMessage,$/;"	f
on_get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn on_get<H>(mut self, handler: H) -> Property<MTFn<D>, D>$/;"	f
on_get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn on_get<H>(mut self, handler: H) -> Property<MTFnMut<D>, D>$/;"	f
on_get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn on_get<H>(mut self, handler: H) -> Property<MTSync<D>, D>$/;"	f
on_set	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn on_set<H: 'a>(mut self, m: H) -> Self$/;"	f
on_set	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn on_set<H>(mut self, m: H) -> Self$/;"	f
on_set	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn on_set<H>(mut self, handler: H) -> Property<MTFn<D>, D>$/;"	f
on_set	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn on_set<H>(mut self, handler: H) -> Property<MTFnMut<D>, D>$/;"	f
on_set	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn on_set<H>(mut self, handler: H) -> Property<MTSync<D>, D>$/;"	f
out_arg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn out_arg<A: Into<Argument>>(mut self, a: A) -> Self { self.o_args.push(a.into()); self }$/;"	f
out_arg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn out_arg<A: Into<Argument>>(mut self, a: A) -> Self { self.o_args.push(a.into()); self }$/;"	f
out_args	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn out_args<Z: Into<Argument>, A: IntoIterator<Item=Z>>(mut self, a: A) -> Self {$/;"	f
out_args	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn out_args<Z: Into<Argument>, A: IntoIterator<Item=Z>>(mut self, a: A) -> Self {$/;"	f
outarg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn outarg<A: arg::Arg, S: Into<String>>(mut self, s: S) -> Self { self.o_args.push((s.into(), A::signature()).into()); self }$/;"	f
outarg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn outarg<A: arg::Arg, S: Into<String>>(mut self, s: S) -> Self { self.o_args.push((s.into(), A::signature()).into()); self }$/;"	f
parse_msg_str	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^fn parse_msg_str(a: Option<&MessageItem>) -> Result<&str,(&'static str, String)> {$/;"	f
parse_msg_variant	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^fn parse_msg_variant(a: Option<&MessageItem>) -> Result<&MessageItem,(&'static str, String)> {$/;"	f
path	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn path<'a>(&'a self) -> Option<Path<'a>> {$/;"	f
ping	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^    fn ping(&self) -> Result<(), super::Error> {$/;"	f
ping	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^    fn ping(&self) -> Result<(), super::Error>;$/;"	f
pos	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn pos(&self) -> u32 { self.position }$/;"	f
previous	/home/spowell/programming/rust/dbus/server/src/main.rs	/^    fn previous(&mut self) {$/;"	f
process_handlers	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    fn process_handlers(&mut self, ci: &ConnectionItem) -> bool {$/;"	f
prop_append_dict	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^pub fn prop_append_dict<'v, M: MethodType<D> + 'v, D: DataType + 'v, I: Iterator<Item=&'v Property<M, D>>>$/;"	f
prop_get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn prop_get(&self, m: &Message) -> MethodResult {$/;"	f
prop_get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    fn prop_get(&self, m: &MethodInfo<M, D>) -> MethodResult {$/;"	f
prop_get_all	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn prop_get_all(&self, m: &Message) -> MethodResult {$/;"	f
prop_get_all	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    fn prop_get_all(&self, m: &MethodInfo<M, D>) -> MethodResult {$/;"	f
prop_lifetime_simple	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^fn prop_lifetime_simple() {$/;"	f
prop_server	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^fn prop_server() {$/;"	f
prop_set	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn prop_set(&self, m: &Message, o: &ObjectPath<M>, t: &Tree<M>) -> MethodResult {$/;"	f
prop_set	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    fn prop_set(&self, m: &MethodInfo<M, D>) -> MethodResult {$/;"	f
property	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn property<'b, T: Into<String>, I: Into<MessageItem>>(&self, t: T, i: I) -> Property<MethodFn<'b>> {$/;"	f
property	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn property<'b, T: Into<String>, I: Into<MessageItem>>(&self, t: T, i: I) -> Property<MethodFnMut<'b>> {$/;"	f
property	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn property<T: Into<String>, I: Into<MessageItem>>(&self, t: T, i: I) -> Property<MethodSync> {$/;"	f
property	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^    pub fn property<A: arg::Arg, T: Into<String>>(&self, name: T, data: D::Property) -> Property<M, D> {$/;"	f
property_get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    fn property_get(&self, msg: &mut Message) -> MethodResult {$/;"	f
property_getall	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    fn property_getall(&self, msg: &mut Message) -> MethodResult {$/;"	f
property_set	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    fn property_set(&self, msg: &mut Message) -> MethodResult {$/;"	f
read	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn read<T: Arg + Get<'a>>(&mut self) -> Result<T, TypeMismatchError> {$/;"	f
read1	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn read1<'a, G1: Arg + Get<'a>>(&'a self) -> Result<G1, TypeMismatchError> {$/;"	f
read2	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn read2<'a, G1: Arg + Get<'a>, G2: Arg + Get<'a>>(&'a self) -> Result<(G1, G2), TypeMismatchError> {$/;"	f
read3	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn read3<'a, G1: Arg + Get<'a>, G2: Arg + Get<'a>, G3: Arg + Get<'a>>(&'a self) -> $/;"	f
read4	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn read4<'a, G1: Arg + Get<'a>, G2: Arg + Get<'a>, G3: Arg + Get<'a>, G4: Arg + Get<'a>>(&'a self) ->$/;"	f
read5	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn read5<'a, G1: Arg + Get<'a>, G2: Arg + Get<'a>, G3: Arg + Get<'a>, G4: Arg + Get<'a>, G5: Arg + Get<'a>>(&'a self) ->$/;"	f
readable	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^    pub fn readable(&self) -> bool { self.read }$/;"	f
recurse	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn recurse(&mut self, arg_type: ArgType) -> Option<Iter<'a>> {$/;"	f
refarg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn refarg() {$/;"	f
refarg_impl	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^macro_rules! refarg_impl {$/;"	d
register_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn register_name(&self, name: &str, flags: u32) -> Result<RequestNameReply, Error> {$/;"	f
register_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    fn register_name() {$/;"	f
register_object_path	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn register_object_path(&self, path: &str) -> Result<(), Error> {$/;"	f
release_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn release_name(&self, name: &str) -> Result<ReleaseNameReply, Error> {$/;"	f
remote_get	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn remote_get(&self, _: &Message) -> Result<MessageItem, MethodErr> {$/;"	f
remote_set	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    fn remote_set(&self, m: &Message, o: &ObjectPath<M>, t: &Tree<M>) -> Result<Vec<Message>, MethodErr> {$/;"	f
remove	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn remove(&mut self, p: &Path<'static>) -> Option<Arc<ObjectPath<M>>> {$/;"	f
remove	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn remove(&mut self, p: &Path<'static>) -> Option<Arc<ObjectPath<M, D>>> {$/;"	f
remove	/home/spowell/programming/rust/dbus/server/src/main.rs	/^    fn remove(&mut self) -> bool {$/;"	f
remove_match	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn remove_match(&self, rule: &str) -> Result<(), Error> {$/;"	f
remove_watch_cb	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^extern "C" fn remove_watch_cb(watch: *mut ffi::DBusWatch, data: *mut c_void) {$/;"	f
ro_property	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn ro_property<T: fmt::Display>(a: &T) -> MethodErr {$/;"	f
ro_property	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    pub fn ro_property<T: fmt::Display>(a: &T) -> MethodErr {$/;"	f
run	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn run<'a, I: Iterator<Item=ConnectionItem>>(&'a self, c: &'a Connection, i: I) -> TreeServer<'a, I, M> {$/;"	f
run	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn run<'a, I: Iterator<Item=ConnectionItem>>(&'a self, c: &'a Connection, i: I) -> TreeServer<'a, I, M, D> {$/;"	f
run	/home/spowell/programming/rust/dbus/server/src/server.rs	/^fn run() -> Result<(), Box<std::error::Error>> {$/;"	f
sarg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn sarg<A: arg::Arg, S: Into<String>>(mut self, s: S) -> Self { self.arguments.push((s.into(), A::signature()).into()); self }$/;"	f
sarg	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn sarg<A: arg::Arg, S: Into<String>>(mut self, s: S) -> Self { self.arguments.push((s.into(), A::signature()).into()); self }$/;"	f
send	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn send(&self, msg: Message) -> Result<u32,()> {$/;"	f
send_with_reply	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn send_with_reply<'a, F: FnOnce(&Message) + 'a>(&self, msg: Message, f: F) -> MessageReply<F> {$/;"	f
send_with_reply_and_block	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn send_with_reply_and_block(&self, msg: Message, timeout_ms: i32) -> Result<Message, Error> {$/;"	f
sender	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn sender<'a>(&'a self) -> Option<BusName<'a>> {$/;"	f
set	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    fn set(&self, &MessageItem) -> PropertySetResult;$/;"	f
set	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/prop.rs	/^    pub fn set(&mut self, propname: &str, value: MessageItem) -> Result<(), Error> {$/;"	f
set	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/prop.rs	/^    pub fn set(&self, propname: &str, value: MessageItem) -> Result<(), Error> {$/;"	f
set	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^    fn set(&self, interfacename: &str, propertyname: &str, value: super::arg::Variant<Box<super::arg::RefArg>>) -> Result<(), super::Error> {$/;"	f
set	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/stdintf.rs	/^    fn set(&self, interfacename: &str, propertyname: &str, value: super::arg::Variant<Box<super::arg::RefArg>>) -> Result<(), super::Error>;$/;"	f
set_as_variant	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    pub fn set_as_variant(&self, i: &mut arg::Iter, pinfo: &PropInfo<M, D>) -> Result<Option<Message>, MethodErr> {$/;"	f
set_image	/home/spowell/programming/rust/dbus/server/src/main.rs	/^    fn set_image(&mut self, index: usize) -> bool {$/;"	f
set_registered	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn set_registered(&self, c: &Connection, b: bool) -> Result<(), Error> {$/;"	f
set_registered	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    fn set_registered(&self, register: bool) -> Result<(), Error> {$/;"	f
set_registered	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^    pub fn set_registered(&mut self, register: bool) -> Result<(), Error> {$/;"	f
set_registered	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    pub fn set_registered(&self, c: &Connection, b: bool) -> Result<(), Error> {$/;"	f
set_value	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn set_value(&self, m: MessageItem) -> Result<Vec<Message>,()> {$/;"	f
signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    fn signal() {$/;"	f
signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn signal(path: &Path, iface: &Interface, name: &Member) -> Message {$/;"	f
signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn signal<T: Into<Member<'static>>>(&self, t: T) -> Signal {$/;"	f
signal	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^    pub fn signal<T: Into<Member<'static>>>(&self, name: T, data: D::Signal) -> Signal<D> {$/;"	f
signal_with_args	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn signal_with_args<F: FnOnce(&mut Message)>(&self, i: &Interface, m: &Member, f: F) -> Result<u32, Error> {$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn signature(&self) -> Signature<'static> { Signature::from(format!("a{}", <T as Arg>::signature())) }$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn signature(&self) -> Signature<'static> { format!("a{{{}{}}}", <K as Arg>::signature(), <V as Arg>::signature()).into() }$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn signature() -> Signature<'static> { Signature::from(format!("a{}", T::signature())) }$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/array_impl.rs	/^    fn signature() -> Signature<'static> {$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn signature(&self) -> Signature<'static> { <$t as Arg>::signature() }$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn signature(&self) -> Signature<'static> { unsafe { Signature::from_slice_unchecked($f) } }$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn signature() -> Signature<'static> { unsafe { Signature::from_slice_unchecked($f) } }$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn signature() -> Signature<'static> { unsafe { Signature::from_slice_unchecked(b"b\\0") } }$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn signature() -> Signature<'static> { unsafe { Signature::from_slice_unchecked(b"d\\0") } }$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn signature() -> Signature<'static> { unsafe { Signature::from_slice_unchecked(b"h\\0") } }$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^    fn signature() -> Signature<'static> { unsafe { Signature::from_slice_unchecked(b"s\\0") } }$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^    pub fn signature(&mut self) -> Signature<'static> {$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn signature(&self) -> Signature<'static> { (&**self).signature() }$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn signature(&self) -> Signature<'static>;$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn signature() -> Signature<'static> { T::signature() }$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^    fn signature() -> Signature<'static>;$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn signature(&self) -> Signature<'static> { Signature::from(self.type_sig()).into_static() }$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn signature(&self) -> Signature<'static> { unsafe { Signature::from_slice_unchecked(b"v\\0") } }$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn signature(&self) -> Signature<'static> {$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn signature() -> Signature<'static> { unsafe { Signature::from_slice_unchecked(b"v\\0") } }$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^    fn signature() -> Signature<'static> {$/;"	f
signature	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^    pub fn signature(&self) -> &Signature<'static> { &self.1 }$/;"	f
some_path	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/strings.rs	/^fn some_path() {$/;"	f
string_impl	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/basic_impl.rs	/^macro_rules! string_impl {$/;"	d
struct_impl	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/variantstruct_impl.rs	/^macro_rules! struct_impl {$/;"	d
test	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/msgarg.rs	/^mod test {$/;"	m
test	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^mod test {$/;"	m
test	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^mod test {$/;"	m
test	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^mod test {$/;"	m
test_compile	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/arg/mod.rs	/^fn test_compile() {$/;"	f
test_get_policykit_version	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/prop.rs	/^fn test_get_policykit_version() {$/;"	f
test_introspect	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^fn test_introspect() {$/;"	f
test_introspection	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^fn test_introspection() {$/;"	f
test_introspection	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^fn test_introspection() {$/;"	f
test_objpath	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^fn test_objpath() {$/;"	f
test_prop_handlers	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^fn test_prop_handlers() {$/;"	f
test_refcount	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/objpath.rs	/^fn test_refcount() {$/;"	f
test_set_prop	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^fn test_set_prop() {$/;"	f
test_sync_prop	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^fn test_sync_prop() {$/;"	f
test_sync_prop	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^fn test_sync_prop() {$/;"	f
to_c_str	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^fn to_c_str(n: &str) -> CString { CString::new(n.as_bytes()).unwrap() }$/;"	f
to_method_info	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    pub fn to_method_info(&self) -> MethodInfo<'a, M, D> {$/;"	f
to_pollfd	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^    pub fn to_pollfd(&self) -> libc::pollfd {$/;"	f
to_prop_info	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/methodtype.rs	/^    pub fn to_prop_info(&self, iface: &'a Interface<M, D>, prop: &'a Property<M, D>) -> PropInfo<'a, M, D> {$/;"	f
toggle_play	/home/spowell/programming/rust/dbus/server/src/main.rs	/^    fn toggle_play(&mut self) -> bool {$/;"	f
toggled_watch_cb	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^extern "C" fn toggled_watch_cb(watch: *mut ffi::DBusWatch, data: *mut c_void) {$/;"	f
tree	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn tree(&self) -> Tree<MethodSync> { Tree { paths: BTreeMap::new() }}$/;"	f
tree	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn tree<'b>(&self) -> Tree<MethodFn<'b>> { Tree { paths: BTreeMap::new() }}$/;"	f
tree	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn tree<'b>(&self) -> Tree<MethodFnMut<'b>> { Tree { paths: BTreeMap::new() }}$/;"	f
tree	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/factory.rs	/^    pub fn tree(&self, data: D::Tree) -> Tree<M, D> {$/;"	f
type_sig	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    pub fn type_sig(&self) -> TypeSig<'static> {$/;"	f
unique_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn unique_name(&self) -> String {$/;"	f
unix_fd	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/message.rs	/^    fn unix_fd() {$/;"	f
unregister_object_path	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn unregister_object_path(&self, path: &str) {$/;"	f
update	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^    fn update(&self, watch: *mut ffi::DBusWatch) {$/;"	f
verify_remote_set	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/methoddisp.rs	/^    pub fn verify_remote_set(&self, m: &Message) -> Result<MessageItem, MethodErr> {$/;"	f
watch	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/lib.rs	/^    fn watch() {$/;"	f
watch_fds	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn watch_fds(&self) -> Vec<Watch> {$/;"	f
watch_handle	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn watch_handle(&self, fd: RawFd, flags: c_uint) -> ConnectionItems {$/;"	f
watch_handle	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^    pub fn watch_handle(&self, fd: RawFd, flags: c_uint) {$/;"	f
with	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn with<H: 'static + MsgHandler>(mut self, h: H) -> Self {$/;"	f
with_path	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/connection.rs	/^    pub fn with_path<'a, D: Into<BusName<'a>>, P: Into<Path<'a>>>(&'a self, dest: D, path: P, timeout_ms: i32) ->$/;"	f
writable	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/watch.rs	/^    pub fn writable(&self) -> bool { self.write }$/;"	f
xml_contents	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    fn xml_contents(&self) -> String {$/;"	f
xml_contents	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    fn xml_contents(&self) -> String {$/;"	f
xml_contents	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^    fn xml_contents(&self) -> String;$/;"	f
xml_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    fn xml_name(&self) -> &'static str { "method" }$/;"	f
xml_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    fn xml_name(&self) -> &'static str { "property" }$/;"	f
xml_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    fn xml_name(&self) -> &'static str { "signal" }$/;"	f
xml_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    fn xml_name(&self) -> &'static str { "interface" }$/;"	f
xml_name	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^    fn xml_name(&self) -> &'static str;$/;"	f
xml_params	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    fn xml_params(&self) -> String { String::new() }$/;"	f
xml_params	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/leaves.rs	/^    fn xml_params(&self) -> String { format!(" type=\\"{}\\" access=\\"{}\\"", self.sig, self.rw.introspect()) }$/;"	f
xml_params	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/objectpath.rs	/^    fn xml_params(&self) -> String { String::new() }$/;"	f
xml_params	/home/spowell/.cargo/registry/src/github.com-1ecc6299db9ec823/dbus-0.5.3/src/tree/utils.rs	/^    fn xml_params(&self) -> String;$/;"	f
